#/* $begin ncopy-ys */
##################################################################
# ncopy.ys - Copy a src block of len words to dst.
# Return the number of positive words (>0) contained in src.
#
# Include your name and ID here.
#
# Bilal Özlü
# 1942614
#
# Describe how and why you modified the baseline code.
#
# I converted the loop to a process of 6 elements at a time.(it also diminishes conditional jumps)
# There are 'E' parts at the end in order to handle the remaining ones from the loops.(not all elemets are multiple-of-6)
# Also, I removed subq and irmovq instructions. Instead, I used iaddq for them.
# To decrease waiting while memory stage copying data, I used 2 registers.(by adding one more regsiter ($rcx))
#
##################################################################
# Do not modify this portion
# Function prologue.
# %rdi = src, %rsi = dst, %rdx = len
ncopy:

##################################################################
# You can modify this portion
  # Loop header
  xorq %rax,%rax
  iaddq $-6,%rdx
  jl tail

Loop:
  mrmovq (%rdi), %r10     #read val from src
  mrmovq 8(%rdi), %rcx    #read val from src
  rmmovq %r10, (%rsi)     #store it to dst
  andq %r10, %r10         #val <= 0?
  jle N1                  #if so, goto N1
  iaddq $1, %rax          #count++

N1:
  rmmovq %rcx, 8(%rsi)
  andq %rcx, %rcx
  jle N2
  iaddq $1, %rax

N2:
  mrmovq 16(%rdi), %r10
  mrmovq 24(%rdi), %rcx
  rmmovq %r10, 16(%rsi)
  andq %r10, %r10
  jle N3
  iaddq $1, %rax

N3:
  rmmovq %rcx, 24(%rsi)
  andq %rcx, %rcx
  jle N4
  iaddq $1, %rax

N4:
  mrmovq 32(%rdi), %r10
  mrmovq 40(%rdi), %rcx
  rmmovq %r10, 32(%rsi)
  andq %r10, %r10
  jle N5
  iaddq $1, %rax

N5:
  rmmovq %rcx, 40(%rsi)
  andq %rcx, %rcx
  jle N6
  iaddq $1, %rax

N6:
  iaddq $48, %rdi         #src++
  iaddq $48, %rsi         #dst++
  iaddq $-6, %rdx         #len--
  jge Loop                #if so, goto Loop

tail:
  iaddq $6, %rdx

E1:
  iaddq $-1 , %rdx
  jl Done
  mrmovq (%rdi), %r10     #read val from src
  mrmovq 8(%rdi), %rcx    #read val from src
  rmmovq %r10, (%rsi)     #store it to dst
  andq %r10, %r10         #val <= 0?
  jle E2                  #if so, goto E2
  iaddq $1, %rax

E2:
  iaddq $-1 , %rdx
  jl Done
  rmmovq %rcx, 8(%rsi)
  andq %rcx, %rcx
  jle E3
  iaddq $1, %rax

E3:
  iaddq $-1 , %rdx
  jl Done
  mrmovq 16(%rdi), %r10
  mrmovq 24(%rdi), %rcx
  rmmovq %r10, 16(%rsi)
  andq %r10, %r10
  jle E4
  iaddq $1, %rax

E4:
  iaddq $-1 , %rdx
  jl Done
  rmmovq %rcx, 24(%rsi)
  andq %rcx, %rcx
  jle E5
  iaddq $1, %rax

E5:
  iaddq $-1 , %rdx
  jl Done
  mrmovq 32(%rdi), %r10
  rmmovq %r10, 32(%rsi)
  andq %r10, %r10
  jle Done
  iaddq $1, %rax

##################################################################
# Do not modify the following section of code
# Function epilogue.
Done:
        ret
##################################################################
# Keep the following label at the end of your function
End:
#/* $end ncopy-ys */
